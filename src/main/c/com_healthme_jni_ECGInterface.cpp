/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "com_healthme_jni_ECGInterface.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/* Header for class com_healthme_jni_EcgInterface */
jmethodID gMethodId;
jobject gCallback;
void analyze(char *filename);
char* jstringTostring(JNIEnv* env, jstring jstr)
{
       char* rtn = NULL;
       jclass clsstring = env->FindClass("java/lang/String");
       jstring strencode = env->NewStringUTF("utf-8");
       jmethodID mid = env->GetMethodID(clsstring, "getBytes", "(Ljava/lang/String;)[B");
       jbyteArray barr= (jbyteArray)env->CallObjectMethod(jstr, mid, strencode);
       jsize alen = env->GetArrayLength(barr);
       jbyte* ba = env->GetByteArrayElements(barr, JNI_FALSE);
       if (alen > 0)
       {
                 rtn = (char*)malloc(alen + 1);
                 memcpy(rtn, ba, alen);
                 rtn[alen] = 0;
       }
       env->ReleaseByteArrayElements(barr, ba, 0);
       return rtn;
}
/*
 * Class:     com_healthme_jni_EcgInterface
 * Method:    setCallback
 * Signature: (Lcom/healthme/jni/JniEcgCallback;)V
 */
JNIEXPORT void JNICALL Java_com_healthme_jni_ECGInterface_setCallback(JNIEnv *env, jobject obj, jobject callback){

	printf("Hello ECG callback! \n");
//	jclass cls=env->GetObjectClass(callback);
//	jmethodID methodId=env->GetMethodID(cls,"handle","(IJJJ)V");
//	env->CallObjectMethod(callback,methodId,1,1000l,2000l,3000l);
	jclass cls=env->GetObjectClass(callback);
	gMethodId=env->GetMethodID(cls,"handle","(IJJJ)V");
	if(gMethodId==NULL){
		printf("failed to get method id! \n");
	}
	gCallback = env->NewGlobalRef(callback);
	env->DeleteLocalRef(cls);
}
/*
 * Class:     com_healthme_jni_EcgInterface
 * Method:    analyzeEcgDataFile
 * Signature: (JLjava/lang/String;Lcom/healthme/jni/JniEcgCallback;)V
 */
JNIEXPORT void JNICALL Java_com_healthme_jni_ECGInterface_analyzeEcgDataFile
(JNIEnv *env, jobject jobject, jlong recordId, jstring fileName){
	char *name=jstringTostring(env,fileName);
	printf("Hello ECG in C! \n");
	printf("%s",name);
	analyze(name);
	if (name !=NULL) free(name);

	env->CallObjectMethod(gCallback,gMethodId,recordId,1000l,33333l,recordId);
}


